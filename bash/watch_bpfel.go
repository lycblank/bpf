// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type watchBashInfo struct {
	Content [500]int8
	Pid     int32
}

// loadWatch returns the embedded CollectionSpec for watch.
func loadWatch() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_WatchBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load watch: %w", err)
	}

	return spec, err
}

// loadWatchObjects loads watch and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*watchObjects
//	*watchPrograms
//	*watchMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadWatchObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadWatch()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// watchSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type watchSpecs struct {
	watchProgramSpecs
	watchMapSpecs
}

// watchSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type watchProgramSpecs struct {
	WatchBash *ebpf.ProgramSpec `ebpf:"watch_bash"`
}

// watchMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type watchMapSpecs struct {
	BashInput *ebpf.MapSpec `ebpf:"bash_input"`
}

// watchObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadWatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type watchObjects struct {
	watchPrograms
	watchMaps
}

func (o *watchObjects) Close() error {
	return _WatchClose(
		&o.watchPrograms,
		&o.watchMaps,
	)
}

// watchMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadWatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type watchMaps struct {
	BashInput *ebpf.Map `ebpf:"bash_input"`
}

func (m *watchMaps) Close() error {
	return _WatchClose(
		m.BashInput,
	)
}

// watchPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadWatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type watchPrograms struct {
	WatchBash *ebpf.Program `ebpf:"watch_bash"`
}

func (p *watchPrograms) Close() error {
	return _WatchClose(
		p.WatchBash,
	)
}

func _WatchClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed watch_bpfel.o
var _WatchBytes []byte
